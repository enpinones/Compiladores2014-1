/* The following code was generated by JFlex 1.4.3 on 18/05/14 04:22 */

// -*- mode: java -*-
package analysis;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18/05/14 04:22 from the specification file
 * <tt>lexer.l</tt>
 */
public class Scanner implements Parser.Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CHAR_END = 8;
  public static final int STRING = 2;
  public static final int ESCAPED = 6;
  public static final int YYINITIAL = 0;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\64\2\65\1\66\22\0\1\3\1\14\1\61\1\55"+
    "\1\0\1\47\1\0\1\60\1\36\1\37\1\45\1\43\1\40\1\44"+
    "\1\41\1\46\10\63\2\56\1\53\1\42\1\50\1\52\1\51\2\0"+
    "\1\31\3\57\1\33\7\57\1\32\5\57\1\30\7\57\1\0\1\62"+
    "\2\0\1\2\1\0\1\4\1\11\1\15\1\6\1\12\1\21\1\1"+
    "\1\34\1\20\1\1\1\13\1\16\1\1\1\5\1\23\1\24\1\27"+
    "\1\10\1\17\1\7\1\22\1\26\1\25\1\1\1\35\1\1\3\0"+
    "\1\54\6\0\1\65\u1fa2\0\2\65\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\20\2\2\4\1\2\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\16\2\1\47\1\50\2\2\1\51\4\2\1\4"+
    "\1\2\1\0\1\52\1\53\1\54\1\55\1\0\1\3"+
    "\1\56\1\2\1\57\5\2\1\60\13\2\1\4\1\2"+
    "\3\61\1\62\1\63\1\64\3\2\1\65\2\2\1\66"+
    "\1\67\2\2\1\70\1\2\1\71\1\72\1\73\1\74"+
    "\1\2\1\75\3\2\1\76\1\77\1\2\1\100\1\2"+
    "\1\101\1\2\1\102\1\103\3\2\1\104\1\105\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113"+
    "\0\u0113\0\u05cd\0\u0113\0\u0604\0\u0113\0\u063b\0\u0672\0\u0113"+
    "\0\u06a9\0\u0113\0\u0113\0\u06e0\0\u0113\0\u0113\0\u0717\0\u074e"+
    "\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113"+
    "\0\u0113\0\u0113\0\u0785\0\u0113\0\u0113\0\u07bc\0\u07f3\0\u082a"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u014a\0\u014a\0\u0abe\0\u0af5\0\u014a"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0113"+
    "\0\u0113\0\u0113\0\u0113\0\u074e\0\u0113\0\u014a\0\u0cad\0\u014a"+
    "\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u014a\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6"+
    "\0\u101d\0\u1054\0\u108b\0\u0113\0\u0c76\0\u10c2\0\u014a\0\u014a"+
    "\0\u014a\0\u10f9\0\u1130\0\u1167\0\u014a\0\u119e\0\u11d5\0\u014a"+
    "\0\u014a\0\u120c\0\u1243\0\u014a\0\u127a\0\u014a\0\u014a\0\u014a"+
    "\0\u055f\0\u12b1\0\u0113\0\u12e8\0\u131f\0\u1356\0\u014a\0\u014a"+
    "\0\u138d\0\u014a\0\u13c4\0\u014a\0\u13fb\0\u014a\0\u0113\0\u1432"+
    "\0\u1469\0\u14a0\0\u014a\0\u014a\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\6\1\10\1\11\1\12\1\7\1\13"+
    "\1\14\1\15\1\16\1\7\1\6\1\17\1\20\1\21"+
    "\1\22\1\23\1\7\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\3\32\1\7\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\32\1\55\1\56"+
    "\1\6\1\54\1\10\1\6\1\10\61\57\1\60\1\61"+
    "\4\57\60\62\1\6\1\62\1\61\4\62\4\0\1\63"+
    "\1\64\1\0\1\65\1\66\1\67\7\0\1\70\4\0"+
    "\1\71\31\0\2\72\1\0\1\73\3\0\60\6\1\74"+
    "\6\6\70\0\2\7\1\0\10\7\1\75\21\7\20\0"+
    "\2\7\3\0\1\7\6\0\1\10\60\0\1\10\1\0"+
    "\1\10\1\0\2\7\1\0\1\7\1\76\1\7\1\77"+
    "\4\7\1\75\21\7\20\0\2\7\3\0\1\7\4\0"+
    "\2\7\1\0\6\7\1\100\1\7\1\75\21\7\20\0"+
    "\2\7\3\0\1\7\4\0\2\7\1\0\4\7\1\101"+
    "\3\7\1\75\17\7\1\102\1\103\20\0\2\7\3\0"+
    "\1\7\4\0\2\7\1\0\6\7\1\104\1\7\1\75"+
    "\21\7\20\0\2\7\3\0\1\7\4\0\2\7\1\0"+
    "\4\7\1\105\3\7\1\75\21\7\20\0\2\7\3\0"+
    "\1\7\4\0\2\7\1\0\1\7\1\106\6\7\1\75"+
    "\1\7\1\107\17\7\20\0\2\7\3\0\1\7\4\0"+
    "\2\7\1\0\10\7\1\75\1\7\1\110\17\7\20\0"+
    "\2\7\3\0\1\7\4\0\2\7\1\0\10\7\1\75"+
    "\6\7\1\111\12\7\20\0\2\7\3\0\1\7\4\0"+
    "\2\7\1\0\6\7\1\112\1\7\1\75\21\7\20\0"+
    "\2\7\3\0\1\7\4\0\2\7\1\0\1\7\1\113"+
    "\6\7\1\75\2\7\1\114\1\7\1\115\14\7\20\0"+
    "\2\7\3\0\1\7\4\0\2\7\1\0\1\116\7\7"+
    "\1\75\21\7\20\0\2\7\3\0\1\7\4\0\2\7"+
    "\1\0\1\7\1\117\2\7\1\120\3\7\1\75\21\7"+
    "\20\0\2\7\3\0\1\7\4\0\2\7\1\0\4\7"+
    "\1\121\3\7\1\75\21\7\20\0\2\7\3\0\1\7"+
    "\4\0\2\7\1\0\10\7\1\75\17\7\1\122\1\7"+
    "\20\0\2\7\3\0\1\7\4\0\2\7\1\0\10\7"+
    "\1\75\6\7\1\123\12\7\20\0\2\7\3\0\1\7"+
    "\4\0\2\7\1\0\10\7\1\75\5\7\1\124\13\7"+
    "\20\0\2\7\3\0\1\7\4\0\1\7\1\32\1\0"+
    "\10\7\1\75\13\7\1\32\1\125\2\32\2\7\20\0"+
    "\1\7\1\32\3\0\1\7\4\0\1\7\1\32\1\0"+
    "\10\7\1\75\13\7\4\32\2\7\20\0\1\7\1\32"+
    "\3\0\1\7\4\0\2\7\1\0\10\7\1\75\3\7"+
    "\1\126\15\7\20\0\2\7\3\0\1\7\47\0\1\127"+
    "\11\0\1\54\4\0\1\54\55\0\1\130\66\0\1\131"+
    "\66\0\1\132\66\0\1\133\72\0\1\54\4\0\1\54"+
    "\3\0\61\57\2\0\4\57\3\0\1\134\55\0\1\135"+
    "\2\0\1\134\1\0\1\134\63\0\1\73\4\0\2\7"+
    "\1\0\2\7\1\136\5\7\1\75\21\7\20\0\2\7"+
    "\3\0\1\7\4\0\2\7\1\0\3\7\1\137\4\7"+
    "\1\75\21\7\20\0\2\7\3\0\1\7\4\0\2\7"+
    "\1\0\10\7\1\75\10\7\1\140\10\7\20\0\2\7"+
    "\3\0\1\7\4\0\2\7\1\0\10\7\1\75\5\7"+
    "\1\141\13\7\20\0\2\7\3\0\1\7\4\0\2\7"+
    "\1\0\6\7\1\142\1\7\1\75\21\7\20\0\2\7"+
    "\3\0\1\7\4\0\2\7\1\0\10\7\1\75\7\7"+
    "\1\143\11\7\20\0\2\7\3\0\1\7\4\0\2\7"+
    "\1\0\3\7\1\144\4\7\1\75\21\7\20\0\2\7"+
    "\3\0\1\7\4\0\2\7\1\0\6\7\1\145\1\7"+
    "\1\75\21\7\20\0\2\7\3\0\1\7\4\0\2\7"+
    "\1\0\2\7\1\146\5\7\1\75\21\7\20\0\2\7"+
    "\3\0\1\7\4\0\2\7\1\0\10\7\1\75\2\7"+
    "\1\147\16\7\20\0\2\7\3\0\1\7\4\0\2\7"+
    "\1\0\1\150\7\7\1\75\21\7\20\0\2\7\3\0"+
    "\1\7\4\0\2\7\1\0\10\7\1\75\6\7\1\151"+
    "\12\7\20\0\2\7\3\0\1\7\4\0\2\7\1\0"+
    "\10\7\1\75\1\7\1\152\17\7\20\0\2\7\3\0"+
    "\1\7\4\0\2\7\1\0\10\7\1\75\1\153\20\7"+
    "\20\0\2\7\3\0\1\7\4\0\2\7\1\0\10\7"+
    "\1\75\1\7\1\154\17\7\20\0\2\7\3\0\1\7"+
    "\4\0\2\7\1\0\10\7\1\75\1\155\20\7\20\0"+
    "\2\7\3\0\1\7\4\0\2\7\1\0\10\7\1\75"+
    "\3\7\1\156\15\7\20\0\2\7\3\0\1\7\4\0"+
    "\2\7\1\0\6\7\1\157\1\7\1\75\21\7\20\0"+
    "\2\7\3\0\1\7\4\0\2\7\1\0\10\7\1\75"+
    "\3\7\1\160\15\7\20\0\2\7\3\0\1\7\4\0"+
    "\2\7\1\0\10\7\1\75\3\7\1\161\15\7\20\0"+
    "\2\7\3\0\1\7\4\0\1\7\1\32\1\0\10\7"+
    "\1\75\13\7\2\32\1\162\1\32\2\7\20\0\1\7"+
    "\1\32\3\0\1\7\4\0\2\7\1\0\6\7\1\163"+
    "\1\7\1\75\21\7\20\0\2\7\3\0\1\7\3\0"+
    "\64\127\1\164\1\165\1\166\1\0\2\7\1\0\4\7"+
    "\1\167\3\7\1\75\21\7\20\0\2\7\3\0\1\7"+
    "\4\0\2\7\1\0\6\7\1\170\1\7\1\75\21\7"+
    "\20\0\2\7\3\0\1\7\4\0\2\7\1\0\1\7"+
    "\1\171\6\7\1\75\21\7\20\0\2\7\3\0\1\7"+
    "\4\0\2\7\1\0\6\7\1\172\1\7\1\75\21\7"+
    "\20\0\2\7\3\0\1\7\4\0\2\7\1\0\10\7"+
    "\1\75\5\7\1\173\13\7\20\0\2\7\3\0\1\7"+
    "\4\0\2\7\1\0\1\174\7\7\1\75\21\7\20\0"+
    "\2\7\3\0\1\7\4\0\2\7\1\0\6\7\1\175"+
    "\1\7\1\75\3\7\1\176\15\7\20\0\2\7\3\0"+
    "\1\7\4\0\2\7\1\0\10\7\1\75\2\7\1\177"+
    "\16\7\20\0\2\7\3\0\1\7\4\0\2\7\1\0"+
    "\10\7\1\75\7\7\1\200\11\7\20\0\2\7\3\0"+
    "\1\7\4\0\2\7\1\0\10\7\1\75\4\7\1\201"+
    "\14\7\20\0\2\7\3\0\1\7\4\0\2\7\1\0"+
    "\10\7\1\75\1\7\1\202\17\7\20\0\2\7\3\0"+
    "\1\7\4\0\2\7\1\0\10\7\1\75\2\7\1\203"+
    "\16\7\20\0\2\7\3\0\1\7\4\0\2\7\1\0"+
    "\6\7\1\204\1\7\1\75\21\7\20\0\2\7\3\0"+
    "\1\7\4\0\2\7\1\0\10\7\1\75\11\7\1\205"+
    "\7\7\20\0\2\7\3\0\1\7\4\0\2\7\1\0"+
    "\1\7\1\206\6\7\1\75\21\7\20\0\2\7\3\0"+
    "\1\7\4\0\2\7\1\0\2\7\1\207\5\7\1\75"+
    "\21\7\20\0\2\7\3\0\1\7\4\0\2\7\1\0"+
    "\3\7\1\210\4\7\1\75\21\7\20\0\2\7\3\0"+
    "\1\7\4\0\1\7\1\32\1\0\10\7\1\75\13\7"+
    "\3\32\1\211\2\7\20\0\1\7\1\32\3\0\1\7"+
    "\4\0\2\7\1\0\10\7\1\75\1\7\1\212\17\7"+
    "\20\0\2\7\3\0\1\7\3\0\64\127\1\213\1\165"+
    "\1\166\1\0\2\7\1\0\10\7\1\75\1\214\20\7"+
    "\20\0\2\7\3\0\1\7\4\0\2\7\1\0\4\7"+
    "\1\215\3\7\1\75\21\7\20\0\2\7\3\0\1\7"+
    "\4\0\2\7\1\0\7\7\1\216\1\75\21\7\20\0"+
    "\2\7\3\0\1\7\4\0\2\7\1\0\10\7\1\75"+
    "\4\7\1\217\14\7\20\0\2\7\3\0\1\7\4\0"+
    "\2\7\1\0\10\7\1\75\2\7\1\220\16\7\20\0"+
    "\2\7\3\0\1\7\4\0\2\7\1\0\10\7\1\75"+
    "\5\7\1\221\13\7\20\0\2\7\3\0\1\7\4\0"+
    "\2\7\1\0\6\7\1\222\1\7\1\75\21\7\20\0"+
    "\2\7\3\0\1\7\4\0\2\7\1\0\1\223\7\7"+
    "\1\75\21\7\20\0\2\7\3\0\1\7\4\0\2\7"+
    "\1\0\2\7\1\224\5\7\1\75\21\7\20\0\2\7"+
    "\3\0\1\7\4\0\2\7\1\0\1\225\7\7\1\75"+
    "\21\7\20\0\2\7\3\0\1\7\4\0\2\7\1\0"+
    "\1\7\1\226\6\7\1\75\21\7\20\0\2\7\3\0"+
    "\1\7\4\0\2\7\1\0\10\7\1\227\21\7\20\0"+
    "\2\7\3\0\1\7\4\0\2\7\1\0\2\7\1\230"+
    "\5\7\1\75\21\7\20\0\2\7\3\0\1\7\4\0"+
    "\2\7\1\0\3\7\1\231\4\7\1\75\21\7\20\0"+
    "\2\7\3\0\1\7\4\0\2\7\1\0\10\7\1\75"+
    "\2\7\1\232\16\7\20\0\2\7\3\0\1\7\4\0"+
    "\2\7\1\0\6\7\1\233\1\7\1\75\21\7\20\0"+
    "\2\7\3\0\1\7\4\0\2\7\1\0\6\7\1\234"+
    "\1\7\1\75\21\7\20\0\2\7\3\0\1\7\4\0"+
    "\2\7\1\0\6\7\1\235\1\7\1\75\21\7\20\0"+
    "\2\7\3\0\1\7\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5335];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\25\1\6\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\2\11\1\1\2\11\2\1\12\11"+
    "\1\1\2\11\31\1\1\0\4\11\1\0\1\11\26\1"+
    "\1\11\26\1\1\11\13\1\1\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public static final int KEYWORD = 1;
    public static final int SYMBOL = 2;

    private Object yylval;
    private int type;
    public int beginChar, beginLine, beginCol;

    private StringBuffer realString;
    private StringBuffer printableString;
    private int stCond;

    public Object getLVal()
    {
	return yylval;
    }

    public int getChar()
    {
	return yychar;
    }

    public int getLine()
    {
	return yyline;
    }

    public int getColumn()
    {
	return yycolumn;
    }

    public Boolean isKeyword()
    {
	return this.type == KEYWORD;
    }
    
    public Boolean isSymbol()
    {
	return this.type == SYMBOL;
    }

    public String getPrintableString()
    {
	return this.printableString.toString();
    }

    private void appendChar(char ch)
    {
	if (this.stCond == CHAR) {
	    this.yylval = ch;
	    yybegin(CHAR_END);
	}
	else {
	    this.realString.append(ch);
	    yybegin(STRING);
	}
    }

    public int getStrlen () 
    {
	return this.realString.length();
    }

    public void yyerror(Parser.Location lo, String msg)
    {
	System.err.printf("%s:Syntax error %s\n", lo.toString(),msg);
    }
    public Position getEndPos()
    {
	Position p = new Position(yyline);
	return p;
    }
    public Position getStartPos()
    {
	Position p = new Position(yyline);
	return p;
    }

    private void setSymbol(String str) 
    {
	this.type = SYMBOL;
	this.printableString.setLength(0);
	this.printableString.append(str);
    }

    private void setKeyword(String str) 
    {
	this.type = KEYWORD;
	this.printableString.setLength(0);
	this.printableString.append(str);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
      this.type = 0;
    this.stCond = 0;
    this.realString = new StringBuffer();
    this.printableString = new StringBuffer();
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 41: 
          { setKeyword("or" );return Parser.OR;
          }
        case 71: break;
        case 56: 
          { setKeyword("once" );return Parser.ONCE;
          }
        case 72: break;
        case 43: 
          { setSymbol( "<=" );return Parser.LESSEQ;
          }
        case 73: break;
        case 14: 
          { setSymbol( "%" );return Parser.PERCENT;
          }
        case 74: break;
        case 70: 
          { setKeyword("typecase" );return Parser.TYPECASE;
          }
        case 75: break;
        case 67: 
          { setKeyword("break!"); return Parser.BREAK;
          }
        case 76: break;
        case 24: 
          { this.printableString.append(yytext());
    this.realString.append(yytext());
          }
        case 77: break;
        case 22: 
          { this.stCond = CHAR;
    this.beginCol = yycolumn;
    this.beginChar = yychar;
    this.printableString.setLength(0);
    yybegin(CHAR);
          }
        case 78: break;
        case 34: 
          { this.printableString.append("*verttab*");
    appendChar('\013');
          }
        case 79: break;
        case 35: 
          { char first = yycharat(0);
    this.printableString.append(first);
    appendChar(first);
          }
        case 80: break;
        case 9: 
          { setSymbol( ";" );return Parser.SEMICOLON;
          }
        case 81: break;
        case 16: 
          { setSymbol( ">" );return Parser.GREATER;
          }
        case 82: break;
        case 2: 
          { yylval = yytext(); 
    return Parser.ID;
          }
        case 83: break;
        case 29: 
          { this.printableString.append("*newline*");
    appendChar('\n');
          }
        case 84: break;
        case 53: 
          { setKeyword("else" );return Parser.ELSE;
          }
        case 85: break;
        case 4: 
          { yylval = yytext(); 
    return Parser.UPCASE_ID;
          }
        case 86: break;
        case 50: 
          { setKeyword("attr"); return Parser.ATTR;
          }
        case 87: break;
        case 15: 
          { setSymbol( "<" );return Parser.LESS;
          }
        case 88: break;
        case 38: 
          { yylval = yytext(); 
    return Parser.ITER_NAME;
          }
        case 89: break;
        case 51: 
          { yylval = true;
    return Parser.BOOL;
          }
        case 90: break;
        case 8: 
          { setSymbol( "." );return Parser.DOT;
          }
        case 91: break;
        case 21: 
          { yylval = Integer.parseInt(yytext()); 
    return Parser.INT;
          }
        case 92: break;
        case 28: 
          { this.printableString.append("*alert*");
    appendChar('\007');
          }
        case 93: break;
        case 23: 
          { this.stCond = STRING;
    this.beginChar = yychar;
    this.beginLine = yyline;
    this.beginCol = yycolumn;

    this.printableString.setLength(0);
    this.realString.setLength(0);
    yybegin(STRING);
          }
        case 94: break;
        case 60: 
          { setKeyword("SAME" );return Parser.SAME;
          }
        case 95: break;
        case 12: 
          { setSymbol( "*" );return Parser.ASTERISK;
          }
        case 96: break;
        case 62: 
          { setKeyword("elsif" );return Parser.ELSIF;
          }
        case 97: break;
        case 6: 
          { setSymbol( ")" );return Parser.RPAREN;
          }
        case 98: break;
        case 39: 
          { setKeyword("is" );return Parser.IS;
          }
        case 99: break;
        case 44: 
          { setSymbol( ">=" );return Parser.GREATEREQ;
          }
        case 100: break;
        case 31: 
          { this.printableString.append("*carret*");
    appendChar('\r');
          }
        case 101: break;
        case 45: 
          { setSymbol( ":=" );return Parser.ASSIGN;
          }
        case 102: break;
        case 20: 
          { setSymbol( "#" );return Parser.SHARP;
          }
        case 103: break;
        case 26: 
          { yybegin(ESCAPED);
          }
        case 104: break;
        case 47: 
          { setKeyword("new" );return Parser.NEW;
          }
        case 105: break;
        case 37: 
          { yybegin(YYINITIAL);
    return Parser.CHAR;
          }
        case 106: break;
        case 13: 
          { setSymbol( "/" );return Parser.SLASH;
          }
        case 107: break;
        case 46: 
          { setKeyword("and"); return Parser.AND;
          }
        case 108: break;
        case 17: 
          { setSymbol( "=" );return Parser.EQUAL;
          }
        case 109: break;
        case 64: 
          { yylval = false;
    return Parser.BOOL;
          }
        case 110: break;
        case 57: 
          { setKeyword("when" );return Parser.WHEN;
          }
        case 111: break;
        case 59: 
          { setKeyword("quit" );return Parser.QUIT;
          }
        case 112: break;
        case 19: 
          { setSymbol( "~" );return Parser.TILDE;
          }
        case 113: break;
        case 5: 
          { setSymbol( "(" );return Parser.LPAREN;
          }
        case 114: break;
        case 10: 
          { setSymbol( "+" );return Parser.PLUS;
          }
        case 115: break;
        case 36: 
          { char ch = (char) Integer.parseInt(yytext(), 8);
    this.printableString.append(ch);
    appendChar(ch);
          }
        case 116: break;
        case 27: 
          { this.yylval = yycharat(0);
    this.printableString.append(this.yylval);
    yybegin(CHAR_END);
          }
        case 117: break;
        case 54: 
          { setKeyword("loop" );return Parser.LOOP;
          }
        case 118: break;
        case 69: 
          { setKeyword("private" );return Parser.PRIVATE;
          }
        case 119: break;
        case 55: 
          { setKeyword("self" );return Parser.SELF;
          }
        case 120: break;
        case 18: 
          { setSymbol( ":" );return Parser.COLON;
          }
        case 121: break;
        case 48: 
          { setKeyword("end" );return Parser.END;
          }
        case 122: break;
        case 30: 
          { this.printableString.append("*hortab*");
    appendChar('\t');
          }
        case 123: break;
        case 40: 
          { setKeyword("if" );return Parser.IF;
          }
        case 124: break;
        case 25: 
          { yylval = this.realString.toString();
    yybegin(YYINITIAL);
    return Parser.STRING;
          }
        case 125: break;
        case 32: 
          { this.printableString.append("*backspace*");
    appendChar('\b');
          }
        case 126: break;
        case 68: 
          { setKeyword("include" );return Parser.INCLUDE;
          }
        case 127: break;
        case 42: 
          { setSymbol( "/=" );return Parser.DISTINCT;
          }
        case 128: break;
        case 52: 
          { setKeyword("then" );return Parser.THEN;
          }
        case 129: break;
        case 63: 
          { setKeyword("class" );return Parser.CLASS;
          }
        case 130: break;
        case 58: 
          { setKeyword("void" );return Parser.VOID;
          }
        case 131: break;
        case 1: 
          { yybegin(YYINITIAL);
    return Parser.ERROR;
          }
        case 132: break;
        case 11: 
          { setSymbol( "-" );return Parser.MINUS;
          }
        case 133: break;
        case 33: 
          { this.printableString.append("*formfeed*");
    appendChar('\f');
          }
        case 134: break;
        case 65: 
          { setKeyword("yield" );return Parser.YIELD;
          }
        case 135: break;
        case 66: 
          { setKeyword("return" );return Parser.RETURN;
          }
        case 136: break;
        case 61: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { 
          }
        case 137: break;
        case 49: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { 
          }
        case 138: break;
        case 3: 
          { 
          }
        case 139: break;
        case 7: 
          { setSymbol( "," );return Parser.COMMA;
          }
        case 140: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return Parser.EOF;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
